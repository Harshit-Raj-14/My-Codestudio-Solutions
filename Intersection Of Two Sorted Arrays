/* Two Pointer Approach  */
import java.util.* ;
public class Solution{
	public static ArrayList<Integer> findArrayIntersection(ArrayList<Integer> arr1, int n, ArrayList<Integer> arr2, int m){
		ArrayList<Integer> list = new ArrayList<>();
		int i=0;
		int j=0;
		while(i<n & j<m){
			if(arr1.get(i).equals(arr2.get(j))){
				list.add(arr1.get(i));
				i++;
				j++;
			}
			else if(arr1.get(i)>arr2.get(j)) j++;
			else i++;
		}
		return list;
	}
}
//Time Complexity: O(max(N,M))
//Space Complexity: O(1)

LOGIC : We are only able to use this because we are given arrays are in ascending order.
Now if content of array matches we move forward in both arrays. 
If arr1 elemnt is greater we move forward in the smaller array becuase only then we would have a chance to find a match.
BEWARE:
if(arr1.get(i).equals(arr2.get(j))) : use this condition because it matches content of the list at the indexes
if(arr1.get(i)==arr2.get(j)) : Using this condition will lead to test case failure becuase it then considers the address location and the two arraylist are different objects in memory.
You can also do this to overcome the trouble : 
int first = arr1.get(i);
int second = arr2.get(j);
if(first==second){


/* USING HASHMAP */
import java.util.* ;
public class Solution{
	public static ArrayList<Integer> findArrayIntersection(ArrayList<Integer> arr1, int n, ArrayList<Integer> arr2, int m){
		HashMap<Integer,Integer> map = new HashMap<>();
		ArrayList<Integer> ans = new ArrayList<>();
		for(int i=0;i<arr1.size();i++){	// Adding the elements of the first array in map along with their frequency count
			if(map.containsKey(arr1.get(i))) 
			map.put(arr1.get(i),1+map.get(arr1.get(i)));
			else map.put(arr1.get(i),1);
		}
		for(int i=0;i<arr2.size();i++){
			if(map.containsKey(arr2.get(i))){
				ans.add(arr2.get(i));
				map.put(arr2.get(i),map.get(arr2.get(i))-1);
            			if (map.get(arr2.get(i)) == 0) map.remove(arr2.get(i));		//Deleting the element if it's frequency is 0.
			}
		}
		return ans;
	}
}

LOGIC - using ahshet will not work since it will only give back unique elemtns. So, we start with hashmap storing the vlaue inarr1 as key and their count as value.
Next we start matching them through arr2 and exhaust their count at the same time adding them to ans. Once the count hits 0, make sure to dlete the elemtn becuase then it might go to -1 form the first 'if' of the second loop.


/* FAILED APPROACH */
import java.util.* ;
public class Solution{
	public static ArrayList<Integer> findArrayIntersection(ArrayList<Integer> arr1, int n, ArrayList<Integer> arr2, int m){
		ArrayList<Integer> list = new ArrayList<>();
		for(int i=0;i<arr1.size();i++){
			boolean stop = true;
			for(int j=0;j<arr2.size() & stop==true;j++){
				if(arr1.get(i)==arr2.get(j)) {
					list.add(arr1.get(i));
					stop=false;
				}
			}
		}
		return list;
	}
}

RASON OF FAILING :
While it does at start seem correct and we have also fixed the problem of repeating the number by disabling the inner for loop and going back to outer for loop after amtch found.
There is this one problem.
[1,2,2,1] & [2]
o/p - 2,2
expected o/p - 2
You see iterating from the startin the second loop is down fall. 
So, we need to come up with O(n) solution.


/* FIXING THE ABOVE FAIELD APPROACH O(n^2) TLE */
import java.util.* ;
public class Solution{
	public static ArrayList<Integer> findArrayIntersection(ArrayList<Integer> arr1, int n, ArrayList<Integer> arr2, int m){
		ArrayList<Integer> list = new ArrayList<>();
		for(int i=0;i<arr1.size();i++){
			boolean stop = true;
			for(int j=0;j<arr2.size() & stop==true;j++){
				if(arr1.get(i).equals(arr2.get(j))) {
					list.add(arr1.get(i));
					arr2.set(j,Integer.MIN_VALUE);
					stop=false;
				}
			}
		}
		return list;
	}
}

LOGIC - So, what we have done here, is update the arr2(j) with set. So, if the arr1 again goes through checking through arr2 an already checked intersection wont be compared again.
But TC: O(n^2)
TLE
Though, we can still make it a bit more efficient by adding a condition in 2nd for loop:
if(arr1,get(i)<arr2.get(j)) stop = false;
The array need not go further becuase it is non-decreasing and the possiblity of existing equal already passed.
Still gives TLE.


link - https://www.codingninjas.com/codestudio/problems/intersection-of-2-arrays_1082149
