/* O(n) linear search SOLUTION */
public class Solution {
    public static int[] firstAndLastPosition(ArrayList<Integer> arr, int n, int k) {
        int ans[] = {-1,-1};
        //checking for first position
        for(int i=0;i<arr.size();i++){
            if(arr.get(i)==k){ 
                ans[0] = i;
                break;
            }
        }
        //checking for last position
        for(int j=arr.size()-1;j>=0;j--){
            if(arr.get(j)==k){
                ans[1] = j;
                break;
            }
        }
        return ans;
    }
}

/* NAIVE APPROACH O(n) */
public class Solution {
    public static int[] firstAndLastPosition(ArrayList<Integer> arr, int n, int k) {
        int first = -1;
        int last = -1;
        for (int i = 0; i < n; i++) {
            if (arr.get(i) == k) {
                // Checking for first and last occurence.
                if (first == -1) {
                    first = i;
                    last = i;
                } else {
                    last = i;
                }
            }
        }
        return new int[]{first,last};
    }



/* Optimised O(log n) binary search SOLUTION */
import java.util.* ;
import java.io.*; 
public class Solution {

    public static int[] firstAndLastPosition(ArrayList<Integer> arr, int n, int k) {
        int first = -1;
        int last = -1;
        int l= 0;
        int r= n-1; 
        //For first occurence
        while(l<=r){
            int mid = l + (r-l)/2;      //mid = (l+r)>>1 
            if(arr.get(mid)==k){
                first = mid;
                r=mid-1;
            }
            else if(arr.get(mid)>k) r=mid-1;
            else l=mid+1;
        }
        
        //For last occurence
        l= 0;
        r= n-1;  //reset them
        while(l<=r){
            int mid = l + (r-l)/2;      //mid = (l+r)>>1 
            if(arr.get(mid)==k){
                last = mid;
                l=mid+1;
            }
            else if(arr.get(mid)>k) r=mid-1;
            else l=mid+1;
        }
        return new int[]{first,last};
    }

};


IDEA -
Given sorted array so need to use that fact.
sorted array -> search -> O(logn) -> Binary Search


FOLLOW UP QUESTION : FIND THE TOTAL NO. OF OCCURRENCES of K IN THE ABOVE PROBLEM?
Using binary search, and givne sorted array:
total occurences = (last index position - first index position) +1
    
    
