/* O(n) SOLUTION */
public class Solution {
    public static int[] firstAndLastPosition(ArrayList<Integer> arr, int n, int k) {
        int ans[] = {-1,-1};
        //checking for first position
        for(int i=0;i<arr.size();i++){
            if(arr.get(i)==k){ 
                ans[0] = i;
                break;
            }
        }
        //checking for last position
        for(int j=arr.size()-1;j>=0;j--){
            if(arr.get(j)==k){
                ans[1] = j;
                break;
            }
        }
        return ans;
    }
}

/* NAIVE APPROACH O(n) */
public class Solution {
    public static int[] firstAndLastPosition(ArrayList<Integer> arr, int n, int k) {
        int first = -1;
        int last = -1;
        for (int i = 0; i < n; i++) {
            if (arr.get(i) == k) {
                // Checking for first and last occurence.
                if (first == -1) {
                    first = i;
                    last = i;
                } else {
                    last = i;
                }
            }
        }
        return new int[]{first,last};
    }



/* Optimised O(log n) SOLUTION */

IDEA -
Given sorted array so need to use that fact.
sorted array -> search -> O(logn) -> Binary Search
    
    
