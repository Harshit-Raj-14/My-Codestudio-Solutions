/* USING SWAPPING CYCLE SORT IN-PLACE HASHING SC-O(1) , TC-O(n) */
public class Solution {
	public static int firstMissing(int[] nums, int n) {
		for(int i=0;i<nums.length;i++){
			int element=nums[i];
			int chair=element-1;	//chair where elemtn has to sit like 1 will sit on 0
			if(nums[i]>0 && nums[i]<=nums.length && element!=nums[chair]){	//question condition - is nums[i] sititng on his chair
				int temp=element;
				nums[i]=nums[chair];	//nums[i]=nums[chair];
				nums[chair] = temp;
				i--; 	//right now we send the current elemnt to its correct chair, but we again need to recheck for the new elemnt which came at i
			}
		}	
		for(int i=0;i<nums.length;i++){
			if(i+1!=nums[i]) return i+1;
		}	
		return nums.length+1;
	}
}

LOGIC ---
How to think of this approach? If we were using a hashset we used O(n) space. What we were doing was checking which number existed and which number not by storing them somewhere else.
But what if we are able to make the array such that the elment goes there where they should be. The elements come at their indexes. And we are to make changes in the array itself to do so. 
Hence we can acheive O(1).

So, we are going to put the number in their respective position. So, 1 will got to 0 index.(our positive numbers start from 1) 
2 will go to 1st index and so on.
Formula will be to swap the element we start from with the element of which index it should be.
swap(nums[i], nums[nums[i]-1])


/* PARTIALLY ACCEPTED SOLUTION HASHSET SC-O(n) , TC-O(n) */
class Solution {
    public int firstMissingPositive(int[] nums) {
        HashSet<Integer> set = new HashSet<>();
        //Put all elements in hashset
        for(int i=0;i<nums.length;i++){
            set.add(nums[i]);
        }
        //find max in nums array
        int max = 0;  //initialise max wiht 0 since we may get only negative array elements, so max would come -ve iff you write max=Integer.MIN_VALUE;
        for(int i=0;i<nums.length;i++){
            max = Math.max(nums[i],max);
        }
        //iterate from 1 to max to see which is not first present in set
        for(int i=1;i<=max;i++){
            if(!set.contains(i)) return i;
        }
        return max+1;
    }
}
LOGIC ----
TC - O(n), SC - O(n)
Put all numbers of array in hashset
Find amx of array
Now iterate from 1 to max and check which number is not in set.
That will be our first misisng positive
Note - It will fail one test case becuase of SC


/* SEGRGATION */ 
